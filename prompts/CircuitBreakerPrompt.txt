Trial 1
Consider yourself as a seasoned Quarkus and Spring Boot developer. Given a Resource class written in Quarkus, write its equivalent Spring Boot Controller version. Use lombok, jakarta, and best coding practices. Dont add any text or explanation before and after the code. Don't add any Notes.

Trial 2
For the given Resource class written in Quarkus, write its equivalent Spring Boot Controller version. Use lombok, jakarta, and best coding practices. Add CircuitBreaker and retain the arguments passed. Use resilience4j.

Trial 3
For the given Resource class written in Quarkus, write its equivalent Spring Boot Controller version. Use lombok, jakarta, and best coding practices. Add resilience4j CircuitBreaker with the same arguments as passed in the sample code.

Trial 4
For the given Resource class written in Quarkus, write its equivalent Spring Boot Controller version. Use lombok, jakarta, and best coding practices. Add resilience4j CircuitBreaker with compatible arguments similar to the ones passed in the sample code.

package org.zensar.resource;

import jakarta.json.JsonArray;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.core.Response;
import org.eclipse.microprofile.faulttolerance.CircuitBreaker;
import org.eclipse.microprofile.faulttolerance.Fallback;
import org.eclipse.microprofile.faulttolerance.Retry;
import org.eclipse.microprofile.rest.client.inject.RestClient;
import org.zensar.client.TvSeriesIdProxy;

@Path("/tvseries")
public class TvSeriesResource {

    @RestClient
    TvSeriesIdProxy proxy;

    @GET
    @Path("/{id}")
    @Fallback(fallbackMethod = "getTvSeriesByIdFallback")
    @Retry(maxRetries = 3)
    @CircuitBreaker(requestVolumeThreshold = 4, failureRatio = 0.5, delay = 1000)
    public Response getTvSeriesById(@PathParam("id") int id) {
        return Response.ok(proxy.getTvSeriesById(id)).build();
    }

    public Response getTvSeriesByIdFallback(int id) {
        return Response.ok("Site is under Maintenance").build();
    }

    @GET
    @Path("/person/{personname}")
    public JsonArray getTvSeriesById(@PathParam("personname") String personName) {
        return proxy.getTvSeriesByPersonName(personName);
    }
}